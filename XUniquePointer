#ifndef XUNIQUEPOINTER_H
#define XUNIQUEPOINTER_H

#include "XGlobal"
#include "XMacroHelpers"
#include "XProperty"
#include "XAllocatorBase"

namespace Eks
{

template <typename T,
          typename Deleter=std::default_delete<T> > class UniquePointer
  {
XProperties:
  XROProperty(T *, pointer);
  XRORefProperty(Deleter, deleter);

public:
  explicit UniquePointer(T *value=0, Deleter d=Deleter())
      : _pointer(value),
        _deleter(d)
    {
    }

  explicit UniquePointer(T &&oth)
      : _deleter(d)
    {
    std::swap(_pointer, oth._pointer);
    }

  ~UniquePointer()
    {
    clear();
    }

  UniquePointer<T>& operator=(UniquePointer<T> &&oth)
    {
    std::swap(_pointer, oth._pointer);
    return *this;
    }

  UniquePointer<T>& operator=(T *oth)
    {
    _pointer = oth;
    return *this;
    }

  void clear()
    {
    _deleter(_pointer);
    _pointer = 0;
    }

  void assign(T *data)
    {
    _pointer = data;
    }
    
  T *operator->() { return _pointer; }
  const T *operator->() const { return _pointer; }
  
  operator T*() { return _pointer; }
  operator const T*() const { return _pointer; }

private:
  X_DISABLE_COPY(UniquePointer);
  };

}

#endif // XUNIQUEPOINTER_H
