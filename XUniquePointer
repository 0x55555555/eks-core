#ifndef XUNIQUEPOINTER_H
#define XUNIQUEPOINTER_H

#include "XGlobal"
#include "XMacroHelpers"
#include "XTypedAllocator"
#include "XProperty"
#include "XAllocatorBase"

namespace Eks
{

template <typename T,
          typename Deleter=Eks::TypedAllocator<T> > class UniquePointer : Deleter
  {
XProperties:
  XROProperty(T *, pointer);

public:
  explicit UniquePointer(T *value=0, Deleter d=Deleter())
      : Deleter(d), _pointer(value)
    {
    }

  UniquePointer(T &&oth, Deleter d=Deleter())
      : Deleter(d)
    {
    std::swap(_pointer, oth);
    }

  UniquePointer(UniquePointer<T, Deleter> &&oth)
      : Deleter(oth), _pointer(0)
    {
    std::swap(_pointer, oth._pointer);
    }

  ~UniquePointer()
    {
    clear();
    }

  UniquePointer<T>& operator=(UniquePointer<T, Deleter> &&oth)
    {
    std::swap(_pointer, oth._pointer);
    return *this;
    }

  UniquePointer<T>& operator=(T *oth)
    {
    _pointer = oth;
    return *this;
    }

  void clear()
    {
    if(_pointer)
      {
      destroy(_pointer);
      _pointer = 0;
      }
    }

  void assign(T *data, const Deleter &d)
    {
    *this = d;
    _pointer = data;
    }

  T *value() { return _pointer; }
  const T *value() const { return _pointer; }

  T *operator->() { return _pointer; }
  const T *operator->() const { return _pointer; }

  operator T*() { return _pointer; }
  operator const T*() const { return _pointer; }

private:
  X_DISABLE_COPY(UniquePointer);
  };

template <typename T> Eks::UniquePointer<T, TypedAllocator<T>> AllocatorBase::createUnique()
  {
  void *mem = alloc(sizeof(T), AlignmentOf<T>::Alignment);

  auto t = new(mem) T();
  TypedAllocator<T> alloc(this);

  Eks::UniquePointer<T, TypedAllocator<T>> ptr(t, alloc);
  return std::move(ptr);
  }

template <typename T, typename A> Eks::UniquePointer<T, TypedAllocator<T>> AllocatorBase::createUnique(A a)
  {
  void *mem = alloc(sizeof(T), AlignmentOf<T>::Alignment);

  auto t = new(mem) T(a);
  TypedAllocator<T> alloc(this);

  Eks::UniquePointer<T, TypedAllocator<T>> ptr(t, alloc);
  return std::move(ptr);
  }

}

#endif // XUNIQUEPOINTER_H
