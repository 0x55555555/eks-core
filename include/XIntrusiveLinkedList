#ifndef XINTRUSIVELINKEDLIST_H
#define XINTRUSIVELINKEDLIST_H

namespace Eks
{
template <typename Node, typename Derived> class IntrusiveLinkedListBase
  {
public:
  static void append(Node **start, Node *val)
    {
    xAssert(!Derived::getNext(val));
    Node **location = start;

    while(*location)
      {
      Node **next = Derived::getNextLocation(*location);

      xAssert(*next != val);
      location = next;
      }

    if(location)
      {
      *location = val;
      }
    }

  static void remove(Node **start, Node *val)
    {
    Node **location = start;
    while(*location)
      {
      xAssert(*location != Derived::getNext(*location));

      if((*location) == val)
        {
        (*location) = Derived::getNext(*location);
        break;
        }

      location = Derived::getNextLocation(*location);
      }

    *Derived::getNextLocation(val) = nullptr;
    }

  static bool contains(const Node *const *start, const Node *val)
    {
    const Node *const *op = start;
    while(*op)
      {
      if(*op == val)
        {
        return true;
        }
      op = Derived::getNextLocation(*op);
      }

    return false;
    }
  };

template <typename Node,
          Node* (Node::*Next)>
          class IntrusiveLinkedListMember
    : public IntrusiveLinkedListBase<Node, IntrusiveLinkedListMember<Node, Next>>
  {
public:
  static Node *getNext(Node *prev)
    {
    return prev->*Next;
    }
  static Node **getNextLocation(Node *prev)
    {
    return &(prev->*Next);
    }
  static const Node *const *getNextLocation(const Node *prev)
    {
    return &(prev->*Next);
    }
  };
}

#endif // XINTRUSIVELINKEDLIST_H
