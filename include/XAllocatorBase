#ifndef XALLOCATORBASE_H
#define XALLOCATORBASE_H

#include "XGlobal"
#include "XAssert"
#include "XResourceDescription"

namespace Eks
{

namespace detail
{
struct SharedPolicy;
}

template <typename T> class TypedAllocator;
template <typename T, typename Policy, typename Alloc> class SharedPointer;
template <typename T, typename Alloc> class UniquePointer;

class AllocatorBase
  {
public:
  virtual ~AllocatorBase() {}
  virtual void *alloc(xsize size, xsize alignment=1) = 0;
  virtual void free(void *mem) = 0;

  MemoryResource alloc(const ResourceDescription &fmt)
    {
    return alloc(fmt.size(), fmt.alignment());
    }

  void free(const MemoryResource &rsc)
    {
    return free(rsc.data());
    }

  // todo, variadic template args here...
  template <typename T>
    Eks::SharedPointer<T, Eks::detail::SharedPolicy, TypedAllocator<T>> createShared();

  template <typename T>
    Eks::UniquePointer<T, TypedAllocator<T>> createUnique();
  template <typename T, typename A>
    Eks::UniquePointer<T, TypedAllocator<T>> createUnique(A a);

  template <typename T> T *create()
    {
    void *mem = alloc(sizeof(T), AlignmentOf<T>::Alignment);
    return new(mem) T();
    }

  template <typename T, typename A> T *create(const A &a)
    {
    void *mem = alloc(sizeof(T), AlignmentOf<T>::Alignment);
    return new(mem) T(a);
    }

  template <typename T,
            typename A,
            typename B> T *create(const A &a, const B &b)
    {
    void *mem = alloc(sizeof(T), AlignmentOf<T>::Alignment);
    return new(mem) T(a, b);
    }

  template <typename T,
            typename A,
            typename B,
            typename C> T *create(const A &a, const B &b, const C &c)
    {
    void *mem = alloc(sizeof(T), AlignmentOf<T>::Alignment);
    return new(mem) T(a, b, c);
    }

  template <typename T,
            typename A,
            typename B,
            typename C,
            typename D> T *create(const A &a, const B &b, const C &c, const D &d)
    {
    void *mem = alloc(sizeof(T), AlignmentOf<T>::Alignment);
    return new(mem) T(a, b, c, d);
    }


  // todo, variadic template args here...
  template <typename T> T *createWithAlignment(xsize alignment)
    {
    void *d = alloc(sizeof(T), alignment);
    return new(d) T();
    }

  template <typename T, typename A> T *createWithAlignment(A a, xsize alignment)
    {
    void *mem = alloc(sizeof(T), alignment);
    return new(mem) T(a);
    }

  template <typename T,
            typename A,
            typename B> T *createWithAlignment(A a, B b, xsize alignment)
    {
    void *mem = alloc(sizeof(T), alignment);
    return new(mem) T(a, b);
    }

  template <typename T,
            typename A,
            typename B,
            typename C> T *createWithAlignment(A a, B b, C c, xsize alignment)
    {
    void *mem = alloc(sizeof(T), alignment);
    return new(mem) T(a, b, c);
    }

  template <typename T,
            typename A,
            typename B,
            typename C,
            typename D> T *createWithAlignment(A a, B b, C c, D d, xsize alignment)
    {
    void *mem = alloc(sizeof(T), alignment);
    return new(mem) T(a, b, c, d);
    }

  template <typename T> void destroy(T *t)
    {
    (void)t;
    t->~T();
    free(t);
    }
  };

}

#endif // XALLOCATORBASE_H
