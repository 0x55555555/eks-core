#ifndef XFLAGS_
#define XFLAGS_

#include "XGlobal"
#include <bitset>

namespace Eks
{
namespace detail
{
template <xsize size> class BitHelpers
  {
  // M1: binary: 0101...
  // M2: binary: 00110011..
  // M3: binary:  4 zeros,  4 ones ...
  // H01: the sum of 256 to the power of 0,1,2,3...
  };

template <> class BitHelpers<1>
  {
public:
  enum class Fields : xuint8
    {
    M1 = 0x55,
    M2 = 0x33,
    M4 = 0x0f,
    H01 = 0x01
    };

  static xuint8 numberOfSetBits(xuint8 x) 
    {
    x -= (x >> 1) & (xuint8)Fields::M1;                               // put count of each 2 bits into those 2 bits
    x = (x & (xuint8)Fields::M2) + ((x >> 2) & (xuint8)Fields::M2);   // put count of each 4 bits into those 4 bits
    x = (x + (x >> 4)) & (xuint8)Fields::M4;                          // put count of each 8 bits into those 8 bits
    return (x * (xuint8)Fields::H01);                                 // returns left 8 bits of x + (x<<8) + (x<<16) + (x<<24) + ...
    }
  };

template <> class BitHelpers<4>
  {
public:
  enum class Fields : xuint32
    {
    M1 = 0x55555555,
    M2 = 0x33333333,
    M4 = 0x0f0f0f0f,
    H01 = 0x01010101
    };

  static xuint8 numberOfSetBits(xuint32 x) 
    {
    x -= (x >> 1) & (xuint32)Fields::M1;                                // put count of each 2 bits into those 2 bits
    x = (x & (xuint32)Fields::M2) + ((x >> 2) & (xuint32)Fields::M2);   // put count of each 4 bits into those 4 bits
    x = (x + (x >> 4)) & (xuint32)Fields::M4;                           // put count of each 8 bits into those 8 bits
    return (x * (xuint32)Fields::H01) >> ((sizeof(xuint32)-1)*8);       // returns left 8 bits of x + (x<<8) + (x<<16) + (x<<24) + ...
    }
  };
}

template <typename CONTAINER> class BitField
  {
public:
  BitField(CONTAINER c=0) : _internal(c) { }

  static BitField<CONTAINER> fromIndex(xuint8 i)
    {
    return BitField<CONTAINER>(1<<i);
    }

  typedef detail::BitHelpers<sizeof(CONTAINER)> Helpers;

  bool hasAll(const BitField<CONTAINER> &c) const { return (_internal & c._internal ) == (CONTAINER)c; }
  bool hasAny(const BitField<CONTAINER> &c) const { return (_internal & c._internal ) != 0; }
  bool hasAny() const { return _internal != 0; }

  BitField<CONTAINER> operator~() const
    {
    return BitField<CONTAINER>(~_internal);
    }

  BitField<CONTAINER> operator&(const BitField<CONTAINER> &f) const
    {
    return BitField<CONTAINER>(_internal&f._internal);
    }

  bool operator==(CONTAINER c)
    {
    return _internal == c;
    }

  bool operator!=(CONTAINER c)
    {
    return _internal != c;
    }

  BitField<CONTAINER> &operator |=(CONTAINER c)
    {
    _internal |= c;
    return *this;
    }

  CONTAINER operator*() const
    {
    return _internal;
    }

  xuint8 numberOfSetBits() const
    {
    return Helpers::numberOfSetBits(_internal);
    }

  bool firstSetIndex(xuint8* index) const
    {
    for(xuint8 i = 0; i < (sizeof(CONTAINER)*8); ++i)
      {
      CONTAINER mask = 1<<i;
      if((_internal&mask) != 0)
        {
        *index = i;
        return true;
        }
      }

    *index = (CONTAINER)-1;
    return false;
    }

  void setBitAtIndex(xuint8 index)
    {
    _internal |= 1<<index;
    }

  bool hasIndex(xuint8 index) const
    {
    return hasAny(1<<index);
    }

private:
  CONTAINER _internal;
  };
}

template <typename ENUM, typename CONTAINER=xuint32> class XFlags : Eks::BitField<CONTAINER>
  {
public:
  XFlags(CONTAINER c) : _internal(c) { }

  bool hasFlag(ENUM c) const { return (_internal & c ) == (CONTAINER)c; }
  bool hasAllFlags(CONTAINER c) const { return (_internal & c ) == (CONTAINER)c; }
  bool hasAnyFlags(CONTAINER c) const { return (_internal & c ) != 0; }
  void clearFlag(ENUM c) { _internal = ~(~_internal | c); }
  void setFlag(ENUM c) { _internal = _internal|c; }
  void setFlag(ENUM c, bool val) { if(val) { setFlag(c); } else { clearFlag(c); } }
  bool hasAnyFlags() const { return _internal != 0; }

  XFlags<ENUM, CONTAINER> operator~() const
    {
    return XFlags(~_internal);
    }

  XFlags<ENUM, CONTAINER> operator&(const XFlags<ENUM, CONTAINER> &f) const
    {
    return XFlags(_internal&f._internal);
    }

  bool operator==(CONTAINER c)
    {
    return _internal == c;
    }

  bool operator!=(CONTAINER c)
    {
    return _internal != c;
    }

  XFlags<ENUM, CONTAINER> &operator |=(CONTAINER c)
    {
    _internal |= c;
    return *this;
    }

  CONTAINER operator*() const
    {
    return _internal;
    }

    int NumberOfSetBits(CONTAINER)
    {
      i = i - ((i >> 1) & 0x55555555);
      i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
      return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
    }
private:
  CONTAINER _internal;
  };

#endif // XFLAGS_
