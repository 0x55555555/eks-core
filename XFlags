#ifndef XFLAGS_
#define XFLAGS_

#include "XGlobal"

template <typename ENUM, typename CONTAINER=xuint32> class XFlags
  {
public:
  XFlags(CONTAINER c) : _internal(c) { }

  bool hasFlag(ENUM c) const { return (_internal & c ) == (CONTAINER)c; }
  bool hasAllFlags(CONTAINER c) const { return (_internal & c ) == (CONTAINER)c; }
  bool hasAnyFlags(CONTAINER c) const { return (_internal & c ) != 0; }
  void clearFlag(ENUM c) { _internal = ~(~_internal | c); }
  void setFlag(ENUM c) { _internal = _internal|c; }
  void setFlag(ENUM c, bool val) { if(val) { setFlag(c); } else { clearFlag(c); } }
  bool hasAnyFlags() const { return _internal != 0; }

  bool operator==(CONTAINER c)
    {
    return _internal == c;
    }

  bool operator!=(CONTAINER c)
    {
    return _internal != c;
    }

  XFlags<ENUM, CONTAINER> &operator |=(CONTAINER c)
    {
    _internal |= c;
    return *this;
    }

  CONTAINER operator*() const
    {
    return _internal;
    }

private:
  CONTAINER _internal;
  };

#endif // XFLAGS_
