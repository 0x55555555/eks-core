#ifndef XPRIVATEIMPL_H
#define XPRIVATEIMPL_H

#include "XGlobal"
#include "XAssert"

namespace Eks
{

template <xsize size> class PrivateImpl
  {
public:
  template <typename T> T *data()
    {
    xCompileTimeAssert(sizeof(T) <= size);

    return reinterpret_cast<T*>(_data);
    }

  template <typename T> const T *data() const
    {
    xCompileTimeAssert(sizeof(T) <= size);

    return reinterpret_cast<const T*>(_data);
    }

  template <typename T> void destroy()
    {
    xCompileTimeAssert(sizeof(T) <= size);

    if(_valid)
      {
      T *d = data<T>();
      (void)d;
      d->~T();
      _valid = false;
      }
    }

  bool isValid() const
    {
    return _valid;
    }

protected:
  PrivateImpl()
    {
    _valid = false;
    }

  ~PrivateImpl()
    {
    xAssert(!_valid);
    }

private:
  bool _valid;
  xuint8 _data[size];
  };

}

#endif // XPRIVATEIMPL_H
