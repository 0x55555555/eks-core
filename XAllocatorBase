#ifndef XALLOCATORBASE_H
#define XALLOCATORBASE_H

#include "XGlobal"
#include "XAssert"
#include "XResourceDescription"

namespace Eks
{

class AllocatorBase
  {
public:
  virtual ~AllocatorBase() {}
  virtual void *alloc(xsize size, xsize alignment=X_ALIGN_BYTE_COUNT) = 0;
  virtual void free(void *mem) = 0;

  // todo, variadic template args here...
  template <typename T> T *create(xsize alignment=0)
    {
    void *d = alloc(sizeof(T), alignment);
    return new(d) T();
    }

  template <typename T, typename A> T *create(A a, xsize alignment=0)
    {
    void *d = alloc(sizeof(T), alignment);
    return new(d) T(a);
    }

  template <typename T> void destroy(T *t)
    {
    (void)t;
    t->~T();
    free(t);
    }
  };

class EKSCORE_EXPORT GlobalAllocator : public AllocatorBase
  {
public:
  virtual void *alloc(xsize size, xsize alignment=0);
  virtual void free(void *mem);

  static GlobalAllocator *instance();
  };

}


#define xAllocateAndConstruct(a, t, ...) new(a->alloc(sizeof(t))) t(__VA_ARGS__)
#define xDestroyAndFree(a, t, m) m-> ~t(); a->free(m)

#endif // XALLOCATORBASE_H
